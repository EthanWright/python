import os

from traverse_directory import TraverseDirectory
from paths import Paths

ROOT_PATH = Paths.MUSIC


def run():
    # music_sub_dir = 'phone'
    # music_sub_dir = 'good'
    # music_sub_dir = 'to_sort_'
    # music_sub_dir = 'to_sort_post_rock'

    file_path = os.path.join(ROOT_PATH, music_sub_dir)
    output_file_path = os.path.join(file_path, 'all_songs.txt')

    print_files_in_directory(file_path, output_file_path)


def print_files_in_directory(file_path, output_file_path):
    file_lists = FileListsStructured()
    file_lists.populate_lists_recursively(file_path)
    file_lists.write_lists_to_file(output_file_path)


class TraverseDirectoryLister(TraverseDirectory):

    def __init__(self, fsl):
        self.fsl = fsl

    def handle_dir(self, file_name, directory, full_path):
        self.fsl.dir_list.append(full_path)
        if full_path in self.fsl.file_dict:
            raise Exception("oh no " + full_path)
        self.fsl.file_dict[full_path] = []
        return True

    def handle_file(self, file_name, directory, full_path):
        self.fsl.file_dict[directory].append(full_path)
        return True


class FileListsStructured(object):

    def __init__(self):
        self.dir_list = []
        self.file_dict = {}
        # self.extensions = {}

    def get_sorted_list_for_dir(self, dir_name):
        return sorted(
            self.file_dict.get(dir_name, []),
            key=lambda x: x.lower()
        )

    def populate_lists_recursively(self, file_path):
        directory_lister = TraverseDirectoryLister(self)
        directory_lister.iterate_files_recursively(file_path, lazy=True)

    def write_lists_to_file(self, output_file_path):

        with open(output_file_path, 'w') as write_file:
    
            # write_file.write("Generated by " + os.path.realpath(__file__) + "\n")
            for dir_name in self.dir_list:
                write_file.write('--- ' + dir_name + '\n')
    
                for file_name in self.get_sorted_list_for_dir(dir_name):
                    short_file_name = file_name.replace(ROOT_PATH, '')
                    if self.should_write_to_file(short_file_name):
                        try:
                            write_file.write(short_file_name + '\n')
                        except UnicodeEncodeError as e:
                            exit(f'ERROR writing {short_file_name}\n{e}')
    
                write_file.write('\n')
                # write_file.write('')

    def should_write_to_file(self, file_name):
        title, extension = file_name.rsplit('.', 1)
        # self.extensions[extension] = self.extensions.get(extension, 0) + 1
        if extension.lower() not in ['jpg', 'txt']:
            return True
        return False


if __name__ == '__main__':
    run()
